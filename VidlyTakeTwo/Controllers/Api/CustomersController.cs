using AutoMapper;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web.Http;
using VidlyTakeTwo.Dtos;
using VidlyTakeTwo.Models;

namespace VidlyTakeTwo.Controllers.Api
{//Lecture 66 shows how to test APIs using Postman
    public class CustomersController : ApiController//Note that this does NOT derive from Controller
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }


        //Because the action starts with 'Get', by convention it will do the following:
        // GET api/customers      (starts with api because it's in a folder called api)
        public IHttpActionResult GetCustomers()
        {
            var customerDtos = _context.Customers
                .Include(c => c.MembershipType)
                .ToList()
                .Select(Mapper.Map<Customer, CustomerDto>);

            return Ok(customerDtos);
        }

        //GET api/customers/1
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customer == null)
                return NotFound();

            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }
        //We return Customer, rather than void, in the action below because, by convention, when we create a 
        //resource we return that newly created resource to the client because that resource will probably have
        //an ID generated by the server
        // POST /api/Customers
        [HttpPost]//By applying this attribute, we ensure that this action is only called when we send 
        //an HTTP Post request. Could also do this by convention by naming the action 'PostCustomer'
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                return BadRequest();

            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);
            _context.Customers.Add(customer);
            _context.SaveChanges();//After saving, the ID property of customer is set based on the ID
            //generated in the db

            customerDto.Id = customer.Id;//We need to update the customerDto's ID, which is set in the db
            //before returning it.
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        // PUT  /api/customers/1
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                return BadRequest();

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            Mapper.Map(customerDto, customerInDb);//This line makes the below redundant
            //customerInDb.Name = customerDto.Name; 
            //customerInDb.Birthdate = customerDto.Birthdate;
            //customerInDb.IsSubscribedToNewsLetter = customerDto.IsSubscribedToNewsLetter;
            //customerInDb.MembershipTypeId = customerDto.MembershipTypeId;

            _context.SaveChanges();

            return Ok();
        }

        // DELETE /api/customers/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            return Ok();
        }
    }
}
