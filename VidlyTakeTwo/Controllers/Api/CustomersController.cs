using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web.Http;
using VidlyTakeTwo.Models;

namespace VidlyTakeTwo.Controllers.Api
{//Lecture 66 shows how to test APIs using Postman
    public class CustomersController : ApiController//Note that this does NOT derive from Controller
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }


        //Because the action starts with 'Get', by convention it will do the following:
        // GET api/customers      (starts with api because it's in a folder called api)
        public IEnumerable<Customer> GetCustomers()
        {
            return _context.Customers.ToList();
        }

        //GET api/customers/1
        public Customer GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customer == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);
            //Above code is part of RESTful convention. If the given resource is not found, we return the standard
            //not found Http response

            return customer;
        }
        //We return Customer, rather than void, in the action below because, by convention, when we create a 
        //resource we return that newly created resource to the client because that resource will probably have
        //an ID generated by the server
        // POST /api/Customers
        [HttpPost]//By applying this attribute, we ensure that this action is only called when we send 
        //an HTTP Post request. Could also do this by convention by naming the action 'PostCustomer'
        public Customer CreateCustomer(Customer customer)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);

            _context.Customers.Add(customer);
            _context.SaveChanges();//After saving, the ID property of customer is set based on the ID
            //generated in the db
            return customer;
        }

        // PUT  /api/customers/1
        [HttpPut]
        public void UpdateCustomer(int id, Customer customer)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            customerInDb.Name = customer.Name;
            customerInDb.Birthdate = customer.Birthdate;
            customerInDb.IsSubscribedToNewsLetter = customer.IsSubscribedToNewsLetter;
            customerInDb.MembershipTypeId = customer.MembershipTypeId;

            _context.SaveChanges();
        }

        // DELETE /api/customers/1
        [HttpDelete]
        public void DeleteCustomer(int id)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();
        }
    }
}
