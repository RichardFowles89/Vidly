@model VidlyTakeTwo.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>
@{//The BeginForm() method below returns a disposable object, so we wrap it in a using statement
//It affectively renders the closing html </form> tag.
}
@using (Html.BeginForm("Save", "Customers"))
{ //we need to wrap each input textbox in a div with the class "form-group
  //Instead of the below Html methods, we could just use standard html (eg <label>). However,
  //using the Html methods allows us pass the attributes of the model to the browser. If you load
  //this page and 'inspect' the elements of the below code, you will see that the data validation
  // we have set up in our models (eg. non-nullable, stringLength(255) is present in the code
  //data-val=true...

    //Any properties in the annonymous object passed as the second arg in the TextBoxFor() method
    //will be rendered as html attributes. Also, when I added the Validation message below, and the
    //field and input validation errors in Site.css in the Content folder, the error DID NOT appear
    //red in the browser until I pressed Ctrl+F5 in the browser - Strange!
    @Html.ValidationSummary(true, "Please fix the following errors.")
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Name)
        @Html.TextBoxFor(m => m.Customer.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.Name)
    </div>
    //LabelFor() method above does the same thing as <label> tag. When you
    //click on the label in the browser, the corresponding textbox is highlighted.
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.MembershipTypeId)
        @Html.DropDownListFor(m => m.Customer.MembershipTypeId, new SelectList(Model.MembershipTypes, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeId)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Birthdate)
        @Html.TextBoxFor(m => m.Customer.Birthdate, "{0:d MMM yyyy}", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.Birthdate)
    </div>

    
    //SelectList() is a type used in ASP.NET to initialise a dropdown list.

    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsLetter) Subscribed to Newsletter?
        </label>
    </div>
    //We got the above checkbox div from getbootstrap.com. Then replaced what was inside the
    //<label>
    @Html.HiddenFor(m => m.Customer.Id)//The customer id is used in Save() in the controller. So, we
    //need put it here is it gets passed to the action. It is hidden because we don't actually want to
    //see it
    <button type="submit" class="btn btn-primary">Save</button>
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}
@{ //Look in _Layout.cshtml. At the bottom is RenderSection(scripts). The above gets passed to there
   //IMPORTANT: This moves the validating to the client computer. Now, the data annotation attributes
   //such Required and StringLength(255) are checked on the client machine, not the web server. This
   //is done using JQuery validation. This only works with standard, default attributes, not custom-
   //made ones.
}